// Prisma schema file for HalalChain backend
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("STORAGE_PRISMA_DATABASE_URL")
}

enum UserRole {
  SUPPLIER
  CERTIFIER
  AUDITOR
  CONSUMER
  SHIPPER
  CARRIER
  DRIVER
  ADMIN
}

enum ProductCategory {
  MEAT_POULTRY
  DAIRY_PRODUCTS
  PROCESSED_FOODS
  BEVERAGES
  COSMETICS
  PHARMACEUTICALS
}

enum CertificationStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  EXPIRED
}

enum CertificationType {
  STANDARD
  ORGANIC
  PREMIUM
}

enum TrackingStatus {
  PENDING
  IN_TRANSIT
  DELIVERED
  DELAYED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum ShipmentStatus {
  PENDING
  ASSIGNED
  IN_TRANSIT
  DELIVERED
  CANCELLED
  DELAYED
}

model User {
  id                  String   @id @default(cuid())
  email               String   @unique
  password            String
  firstName           String
  lastName            String
  name                String?
  role                UserRole
  companyName         String?
  phoneNumber         String?
  address             String?
  isActive            Boolean  @default(true)
  profileImage        String?
  certificationNumber String?
  licenseNumber       String?
  refreshToken        String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  products         Product[]
  submittedCertifications Certification[] @relation("CertificationSubmitter")
  assignedCertifications Certification[] @relation("CertificationAssignee")
  tracking         Tracking[]
  trackingEvents   TrackingEvent[]
  freightBookingsAsShipper FreightBooking[] @relation("FreightBookingShipper")
  freightBookingsAsCarrier FreightBooking[] @relation("FreightBookingCarrier")
  freightBookingsCreated FreightBooking[] @relation("FreightBookingCreator")
  shipmentsAsCarrier Shipment[] @relation("ShipmentCarrier")
  shipmentsAsDriver Shipment[] @relation("ShipmentDriver")
  warehouses       Warehouse[] @relation("WarehouseManager")
  deliveriesAsDriver Delivery[] @relation("DeliveryDriver")
  invoicesAsClient Invoice[] @relation("ClientInvoices")
  notifications Notification[]
  analytics Analytics[]
  integrations Integration[]

  @@map("users")
}

model Product {
  id                    String         @id @default(cuid())
  name                  String
  category              ProductCategory
  sku                   String
  description           String?
  currentStock          Int
  minStock              Int
  maxStock              Int
  unit                  String
  costPerUnit           Float
  sellingPrice          Float
  supplier              String
  location              String
  expiryDate            DateTime
  batchNumber           String
  halalCertified        Boolean        @default(true)
  certificationNumber   String?
  certificationExpiry   DateTime?
  temperature           Float?
  humidity              Float?
  isActive              Boolean        @default(true)
  createdBy             String
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt

  // Relations
  user User @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("products")
}

model Certification {
  id                        String            @id @default(cuid())
  productName               String
  productCategory           String
  companyName               String
  companyAddress            String
  contactPerson             String
  contactEmail              String
  contactPhone              String
  productDescription        String
  ingredients               Json
  manufacturingProcess      String
  supplierDetails           String
  requestedCertificationType CertificationType
  expectedCompletionDate    DateTime
  supportingDocuments       Json          @default("[]")
  status                    CertificationStatus @default(PENDING)
  reviewComments            String?
  approvedBy                String?
  approvedAt                DateTime?
  certificationNumber       String?
  validUntil                DateTime?
  blockchainTxHash          String?
  ipfsDocumentHash          String?
  ociDocumentUrl            String?
  submittedBy               String
  assignedTo                String?
  createdAt                 DateTime          @default(now())
  updatedAt                 DateTime          @updatedAt

  // Relations
  submitter User @relation(fields: [submittedBy], references: [id], onDelete: Cascade, name: "CertificationSubmitter")
  assignee  User? @relation(fields: [assignedTo], references: [id], onDelete: SetNull, name: "CertificationAssignee")
  blockchainTransactions BlockchainTransaction[]

  @@map("certifications")
}

model Tracking {
  id                  String   @id @default(cuid())
  productName         String
  quantity            String
  origin              String
  destination         String
  estimatedDelivery   DateTime
  currentLocation     String?
  status              TrackingStatus @default(PENDING)
  progress            Int
  halalCertified      Boolean  @default(true)
  temperature         Json?
  carrier             String
  blockchainVerified  Boolean  @default(true)
  blockchainTxHash    String?
  ipfsHash            String?
  ociStorageUrl       String?
  createdBy           String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  creator TrackingEvent[]
  user    User           @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  blockchainTransactions BlockchainTransaction[]

  @@map("tracking")
}

model TrackingEvent {
  id            String   @id @default(cuid())
  location      String
  timestamp     DateTime
  status        TrackingStatus
  temperature   Float?
  humidity      Float?
  description   String
  blockchainHash String?
  ipfsEventHash String?
  verifiedBy    String?
  coordinates   Json?
  trackingId    String
  userId        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  tracking Tracking @relation(fields: [trackingId], references: [id], onDelete: Cascade)
  user     User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("tracking_events")
}

model FreightBooking {
  id            String   @id @default(cuid())
  shipperId     String
  carrierId     String?
  origin        String
  destination   String
  cargoDetails  Json?
  bookingDate   DateTime @default(now())
  status        BookingStatus @default(PENDING)
  estimatedCost Float?
  actualCost    Float?
  createdBy     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  shipper User @relation(fields: [shipperId], references: [id], onDelete: Cascade, name: "FreightBookingShipper")
  carrier User? @relation(fields: [carrierId], references: [id], onDelete: SetNull, name: "FreightBookingCarrier")
  user    User  @relation(fields: [createdBy], references: [id], onDelete: Cascade, name: "FreightBookingCreator")
  shipments Shipment[]

  @@map("freight_bookings")
}

model Shipment {
  id                String   @id @default(cuid())
  bookingId         String
  carrierId         String?
  driverId          String?
  vehicleId         String?
  currentLocation   String?
  estimatedDelivery DateTime?
  actualDelivery    DateTime?
  status            ShipmentStatus @default(PENDING)
  trackingNumber    String   @unique
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  booking FreightBooking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  carrier User?          @relation(fields: [carrierId], references: [id], onDelete: SetNull, name: "ShipmentCarrier")
  driver  User?          @relation(fields: [driverId], references: [id], onDelete: SetNull, name: "ShipmentDriver")
  customsDocuments CustomsDocument[]
  deliveries Delivery[]
  invoices Invoice[]

  @@map("shipments")
}

enum CustomsStatus {
  PENDING
  SUBMITTED
  APPROVED
  REJECTED
  CLEARED
}

model CustomsDocument {
  id            String        @id @default(cuid())
  shipmentId    String
  documentType  String
  description   String?
  documentUrl   String?
  status        CustomsStatus @default(PENDING)
  approvedBy    String?
  approvedAt    DateTime?
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  shipment      Shipment      @relation(fields: [shipmentId], references: [id], onDelete: Cascade)

  @@map("customs_documents")
}

enum WarehouseStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
}

model Warehouse {
  id            String   @id @default(cuid())
  name          String
  location      String
  capacity      Int
  status        WarehouseStatus @default(ACTIVE)
  managerId     String?
  contactInfo   Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  manager       User?    @relation("WarehouseManager", fields: [managerId], references: [id], onDelete: SetNull)
  inventory     WarehouseInventory[]

  @@map("warehouses")
}

model WarehouseInventory {
  id            String   @id @default(cuid())
  warehouseId   String
  productId     String
  quantity      Int
  minStock      Int      @default(0)
  maxStock      Int?
  location      String?
  expiryDate    DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  warehouse     Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)

  @@map("warehouse_inventory")
}

enum DeliveryStatus {
  PENDING
  ASSIGNED
  IN_TRANSIT
  DELIVERED
  FAILED
  CANCELLED
}

model Delivery {
  id            String   @id @default(cuid())
  shipmentId    String
  driverId      String?
  vehicleId     String?
  status        DeliveryStatus @default(PENDING)
  scheduledDate DateTime?
  actualDate    DateTime?
  deliveryAddress String
  recipientName String?
  recipientPhone String?
  notes         String?
  trackingNumber String  @unique
  proofOfDelivery Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  shipment Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  driver   User?    @relation("DeliveryDriver", fields: [driverId], references: [id], onDelete: SetNull)

  @@map("deliveries")
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
  CASH
  CHECK
  PAYPAL
  STRIPE
}

model Invoice {
  id            String   @id @default(cuid())
  invoiceNumber String   @unique
  shipmentId    String
  clientId      String
  amount        Float
  currency      String   @default("USD")
  status        InvoiceStatus @default(DRAFT)
  dueDate       DateTime
  paidDate      DateTime?
  paymentMethod PaymentMethod?
  notes         String?
  items         Json     // Array of invoice items with description, quantity, unitPrice, total
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  shipment Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  client   User     @relation("ClientInvoices", fields: [clientId], references: [id], onDelete: Cascade)

  @@map("invoices")
}

enum NotificationType {
  EMAIL
  SMS
  PUSH
  IN_APP
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
  DELIVERED
  READ
}

model Notification {
  id          String   @id @default(cuid())
  type        NotificationType
  recipientId String
  recipient   User     @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  title       String
  message     String
  status      NotificationStatus @default(PENDING)
  sentAt      DateTime?
  readAt      DateTime?
  metadata    Json?    // Additional data like email template, SMS provider, etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("notifications")
}

enum AnalyticsType {
  SHIPMENT
  PRODUCT
  USER
  FINANCIAL
}

model Analytics {
  id        String        @id @default(cuid())
  type      AnalyticsType
  data      Json
  userId    String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  user      User?         @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("analytics")
}

enum IntegrationType {
  API
  WEBHOOK
  EMAIL
  SMS
}

enum IntegrationStatus {
  ACTIVE
  INACTIVE
}

model Integration {
  id        String            @id @default(cuid())
  name      String
  type      IntegrationType
  config    Json
  status    IntegrationStatus @default(ACTIVE)
  userId    String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  user      User?             @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("integrations")
}

enum BlockchainNetworkType {
  HYPERLEDGER_FABRIC
  ETHEREUM
  POLYGON
  BSC
}

enum IpfsPinStatus {
  PINNED
  UNPINNED
  PINNING
  FAILED
}

model BlockchainTransaction {
  id            String   @id @default(cuid())
  networkType   BlockchainNetworkType
  transactionHash String @unique
  blockNumber   String?
  contractAddress String?
  methodName    String?
  params        Json?
  status        String   @default("pending")
  gasUsed       String?
  gasPrice      String?
  fromAddress   String?
  toAddress     String?
  value         String?
  data          Json?
  certificationId String?
  trackingId    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  certification Certification? @relation(fields: [certificationId], references: [id], onDelete: SetNull)
  tracking      Tracking?      @relation(fields: [trackingId], references: [id], onDelete: SetNull)

  @@map("blockchain_transactions")
}

model IpfsContent {
  id            String   @id @default(cuid())
  hash          String   @unique
  name          String?
  size          Int?
  contentType   String?
  pinStatus     IpfsPinStatus @default(PINNED)
  metadata      Json?
  relatedEntity String? // e.g., "certification:123", "tracking:456"
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("ipfs_content")
}

model OciResource {
  id            String   @id @default(cuid())
  resourceType  String   // e.g., "object-storage", "function", "database"
  resourceId    String   @unique
  compartmentId String?
  region        String?
  namespace     String?
  bucketName    String?
  objectName    String?
  url           String?
  metadata      Json?
  status        String   @default("active")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("oci_resources")
}
