version: '3.8'

services:
  quality-control-agent:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: halal-logistics-quality-control
    ports:
      - "3017:3017"
    environment:
      - NODE_ENV=production
      - PORT=3017
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key}
      - KAFKA_BROKERS=kafka:9092
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DATABASE_URL=postgresql://quality_user:quality_pass@postgres:5432/quality_control
      - FRONTEND_URL=http://localhost:3000
    depends_on:
      - kafka
      - redis
      - postgres
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./models:/app/models
      - ./standards:/app/standards
    networks:
      - halal-logistics-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3017/api/v1/quality/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Kafka for message broker
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: halal-logistics-kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
      - KAFKA_JMX_PORT=9991
      - KAFKA_JMX_HOSTNAME=kafka
    depends_on:
      - zookeeper
    networks:
      - halal-logistics-network
    volumes:
      - kafka_data:/var/lib/kafka/data
    restart: unless-stopped

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: halal-logistics-zookeeper
    ports:
      - "2181:2181"
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    networks:
      - halal-logistics-network
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    restart: unless-stopped

  # Redis for caching
  redis:
    image: redis:7.2-alpine
    container_name: halal-logistics-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    networks:
      - halal-logistics-network
    volumes:
      - redis_data:/data
    restart: unless-stopped

  # PostgreSQL for data persistence (optional)
  postgres:
    image: postgres:15-alpine
    container_name: halal-logistics-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=quality_control
      - POSTGRES_USER=quality_user
      - POSTGRES_PASSWORD=quality_pass
    networks:
      - halal-logistics-network
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped

networks:
  halal-logistics-network:
    driver: bridge

volumes:
  kafka_data:
    driver: local
  zookeeper_data:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
