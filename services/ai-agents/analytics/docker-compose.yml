version: '3.8'

services:
  analytics-agent:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: halal-logistics-analytics
    restart: unless-stopped
    ports:
      - "3014:3014"
    environment:
      - NODE_ENV=production
      - PORT=3014
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      - KAFKA_BROKERS=${KAFKA_BROKERS:-kafka:9092}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - ORCHESTRATOR_URL=${ORCHESTRATOR_URL:-http://orchestrator:3011}
      - BLOCKCHAIN_API_URL=${BLOCKCHAIN_API_URL:-http://blockchain-agent:3026/api/v1}
      - COMPLIANCE_API_URL=${COMPLIANCE_API_URL:-http://compliance-agent:3013/api/v1}
      - DATABASE_URL=${DATABASE_URL:-postgresql://user:password@postgres:5432/halalchain}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
      - ANALYTICS_RETENTION_DAYS=${ANALYTICS_RETENTION_DAYS:-90}
      - PREDICTION_MODEL_VERSION=${PREDICTION_MODEL_VERSION:-v2.1.0}
      - REPORT_GENERATION_TIMEOUT=${REPORT_GENERATION_TIMEOUT:-300000}
      - CHART_CACHE_TTL=${CHART_CACHE_TTL:-3600}
      - METRICS_COLLECTION_INTERVAL=${METRICS_COLLECTION_INTERVAL:-30000}
      - ALERT_THRESHOLD_CPU=${ALERT_THRESHOLD_CPU:-80}
      - ALERT_THRESHOLD_MEMORY=${ALERT_THRESHOLD_MEMORY:-85}
    depends_on:
      - kafka
      - redis
      - postgres
    networks:
      - halal-logistics-network
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3014/api/v1/analytics/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Kafka for message broker
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: halal-logistics-kafka
    restart: unless-stopped
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
    depends_on:
      - zookeeper
    networks:
      - halal-logistics-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server=localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: halal-logistics-zookeeper
    restart: unless-stopped
    ports:
      - "2181:2181"
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    networks:
      - halal-logistics-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for caching
  redis:
    image: redis:7.2-alpine
    container_name: halal-logistics-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - halal-logistics-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for data persistence
  postgres:
    image: postgres:15-alpine
    container_name: halal-logistics-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=halalchain
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - halal-logistics-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d halalchain"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  redis_data:
  postgres_data:

networks:
  halal-logistics-network:
    driver: bridge
